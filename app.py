import docx2txt
from PyPDF2 import PdfReader
import sqlite3
import streamlit as st
import pandas as pd
import nltk
nltk.download('punkt')  # T√©l√©charge le mod√®le punkt si n√©cessaire
from nltk import tokenize
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import os
os.environ['NLTK_DATA'] = '/tmp/nltk_data'
import asyncio
from googletrans import Translator

translator = Translator()

# Fonction asynchrone pour traduire le texte
async def translate_text(text, target_lang='en'):
    translated = await translator.translate(text, dest=target_lang)
    return translated.text

# Fonction principale qui g√®re l'appel de la traduction
async def main(text):
    translated_text = await translate_text(text, target_lang='en')
    return translated_text

# Partie ex√©cut√©e lorsque le script est lanc√©
if __name__ == "__main__":
    # Exemple de texte √† traduire
    text = "Bonjour tout le monde"
    # Ex√©cute la fonction main et attend le r√©sultat de la traduction
    translated_text = asyncio.run(main(text))  # Cela renvoie directement le texte traduit
    print(f"Texte traduit : {translated_text}")

# Fonctions pour lire les fichiers
def read_text_file(file):
    content = ""
    try:
        content = file.getvalue().decode('utf-8')  # Premier essai avec UTF-8
    except UnicodeDecodeError:
        try:
            content = file.getvalue().decode('latin-1')  # Essai avec latin-1
        except Exception as e:
            st.error(f"Impossible de lire le fichier {file.name} : {str(e)}")
    return content

def read_docx_file(file):
    return docx2txt.process(file)

def read_pdf_file(file):
    text = ""
    pdf_reader = PdfReader(file)
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

def get_text_from_file(uploaded_file):
    content = ""
    if uploaded_file is not None:
        st.write(f"Type de fichier: {uploaded_file.type}")  # Affichage du type de fichier
        if uploaded_file.type == "text/plain":
            content = read_text_file(uploaded_file)  # Traitement des fichiers .txt
        elif uploaded_file.type == "application/pdf":
            content = read_pdf_file(uploaded_file)
        elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            content = read_docx_file(uploaded_file)
        else:
            st.error("Format de fichier non pris en charge.")
    return content

# Fonction pour calculer la similarit√© entre deux textes en pourcentage
def get_similarity(text1, text2):
    text_list = [text1, text2]
    cv = CountVectorizer()
    count_matrix = cv.fit_transform(text_list)
    similarity = cosine_similarity(count_matrix)[0][1]
    return similarity * 100  # Conversion en pourcentage

# Fonction pour extraire les phrases d'un texte
def get_sentences(text):
    sentences = tokenize.sent_tokenize(text)
    return sentences

# Fonction de connexion √† la base de donn√©es SQLite
def connect_db():
    conn = sqlite3.connect("plagiarism.db")
    return conn

# Fonction pour cr√©er les tables dans la base de donn√©es
def create_tables():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS files (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            filename TEXT,
            content TEXT
        )
    """)
    conn.commit()
    conn.close()

# Fonction pour ins√©rer un fichier dans la base
def insert_file(filename, content):
    conn = connect_db()
    cursor = conn.cursor()
    # V√©rifiez si le fichier existe d√©j√†
    cursor.execute("SELECT id FROM files WHERE filename = ?", (filename,))
    existing_file = cursor.fetchone()

    if existing_file:
        # Si le fichier existe, on le met √† jour avec le nouveau contenu
        cursor.execute("UPDATE files SET content = ? WHERE filename = ?", (content, filename))
        conn.commit()
        # st.success(f"Le fichier {filename} a √©t√© mis √† jour dans la base de donn√©es.")
    else:
        # Si le fichier n'existe pas, on l'ins√®re
        cursor.execute("INSERT INTO files (filename, content) VALUES (?, ?)", (filename, content))
        conn.commit() #
        # st.success(f"Le fichier {filename} a √©t√© ajout√© avec succ√®s.")

    conn.close()

# Fonction pour r√©cup√©rer tous les fichiers
def get_all_files():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM files")
    rows = cursor.fetchall()
    conn.close()
    return rows

# Fonction pour supprimer un fichier par son ID
def delete_file(file_id):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM files WHERE id = ?", (file_id,))
    conn.commit()
    conn.close()

# Fonction pour vider la base de donn√©es
def clear_database():
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM files")  # Supprime tous les enregistrements de la table
        conn.commit()
        conn.close()
        return True  # Indique que l'op√©ration a r√©ussi
    except Exception as e:
        st.error(f"Une erreur est survenue lors du vidage de la base de donn√©es : {str(e)}")
        return False

# Fonction pour comparer les fichiers pivots et cibles et retourner les similarit√©s
def get_pivot_similarity(pivot_texts, target_texts, pivot_filenames, target_filenames):
    similarity_list = []
    for i, pivot_text in enumerate(pivot_texts):
        for j, target_text in enumerate(target_texts):
            similarity = get_similarity(pivot_text, target_text)
            similarity_list.append((pivot_filenames[i], target_filenames[j], similarity))
    return similarity_list

def empty_database_button():
    """Renders a checkbox and button to clear the database."""
    confirmation = st.checkbox("Confirmer la suppression de tous les fichiers", value=False)
    if confirmation:
        if st.button("Vider la base de donn√©es"):
            if clear_database():
                st.success("La base de donn√©es a √©t√© vid√©e avec succ√®s.")
            else:
                st.error("Une erreur est survenue lors du vidage de la base de donn√©es.")
    else:
        st.warning("Veuillez cocher la case pour confirmer la suppression.")

# Configure Streamlit page avec un logo personnalis√©
st.set_page_config(
    page_title='PlagDetect',
    layout="wide",
    page_icon="logo.png"  # Utilisation du fichier logo comme ic√¥ne de l'application
)

# Sidebar Menu
menu = ["Accueil", "V√©rifier les Similitudes", "Consulter les Documents", "√Ä propos"]
choice = st.sidebar.selectbox("Menu", menu)

if choice == "Accueil":
    # Ajouter le logo en haut de la page
    st.image("logo.png", width=150)  # Affichez le logo en haut de la page d'accueil
    st.title("üè† Bienvenue dans PlagDetect")
    st.markdown("S√©lectionnez une option dans le menu gauche pour commencer.")

elif choice == "V√©rifier les Similitudes":
    st.title(':mag: PlagDetect - V√©rification des Similitudes')
    st.write("V√©rifiez les similitudes entre les fichiers t√©l√©charg√©s.")

    # File upload in the sidebar
    st.sidebar.title(":file_folder: Importer les fichiers √† comparer")
    st.sidebar.write("T√©l√©chargez des fichiers pivots et cibles pour v√©rifier les similitudes entre eux.")

    pivot_files = st.sidebar.file_uploader("Fichier(s) pivot(s) (.docx, .pdf, .txt)", type=["docx", "pdf", "txt"], accept_multiple_files=True, key="pivot")
    target_files = st.sidebar.file_uploader("Fichier(s) cible(s) (.docx, .pdf, .txt)", type=["docx", "pdf", "txt"], accept_multiple_files=True, key="target")

    # Traitement des fichiers t√©l√©charg√©s
    pivot_texts, pivot_filenames = [], []
    for pivot_file in pivot_files:
        if pivot_file:
            text = get_text_from_file(pivot_file)
            # Traduction en anglais
            text = asyncio.run(main(text))
            pivot_texts.append(text)
            pivot_filenames.append(pivot_file.name)
            insert_file(pivot_file.name, text)

    target_texts, target_filenames = [], []
    for target_file in target_files:
        if target_file:
            text = get_text_from_file(target_file)
            # Traduction en anglais
            text = asyncio.run(main(text))
            target_texts.append(text)
            target_filenames.append(target_file.name)
            insert_file(target_file.name, text)

    if st.button('V√©rifier les similitudes entre les fichiers'):
        if not pivot_texts or not target_texts:
            st.error("Aucun fichier trouv√© pour la recherche de similitudes.")
            st.stop()

        similarities = get_pivot_similarity(pivot_texts, target_texts, pivot_filenames, target_filenames)
        df = pd.DataFrame(similarities, columns=['Fichier Pivot', 'Fichier Cible', 'Similarit√© (%)'])
        df = df.sort_values(by=['Similarit√© (%)'], ascending=False)
        st.dataframe(df)

elif choice == "Consulter les Documents":
    st.title(":open_file_folder: Consulter les Documents Enregistr√©s")
    files = get_all_files()
    if files:
        df = pd.DataFrame(files, columns=["ID", "Nom du Fichier", "Contenu"])
        st.dataframe(df)

        selected_id = st.number_input("Entrez l'ID du fichier √† g√©rer", min_value=1, step=1)

        if st.button("Afficher le Contenu"):
            selected_file = next((file for file in files if file[0] == selected_id), None)
            if selected_file:
                st.subheader(f"Contenu du fichier : {selected_file[1]}")
                st.text_area("Contenu", selected_file[2], height=300)
            else:
                st.error("Fichier introuvable.")

        if st.button("Supprimer le fichier"):
            delete_file(selected_id)
            st.success(f"Le fichier {selected_id} a √©t√© supprim√© avec succ√®s.")

        empty_database_button()

    else:
        st.info("Aucun fichier trouv√© dans la base de donn√©es.")

elif choice == "√Ä propos":
    st.title("üìù √Ä propos")
    st.write("""
        **PlagDetect** est une application con√ßue pour d√©tecter le plagiat entre diff√©rents documents en analysant leurs contenus et en identifiant les similarit√©s.

        ### Fonctionnalit√©s principales :
        - **Comparaison de deux ou plusieurs documents** : √âvalue √† quel point un document est "inspir√©" d'un autre en donnant un pourcentage de similarit√©.
        - **Analyse de plusieurs documents** : Regroupe les documents par niveaux de similarit√© d√©tect√©e.
        - **Interface utilisateur intuitive** : Une interface conviviale qui facilite le t√©l√©chargement et l'analyse de vos documents.
        - **Support multi-formats** : Prends en charge divers formats de fichiers (.docx, .pdf, et .txt.)
        - **Comparaison de documents dans diff√©rentes langues** : Capacit√© √† comparer des documents r√©dig√©s dans diff√©rentes langues.

        ### Notre √âquipe :
        **PlagDetect** est d√©velopp√© par une √©quipe d'Ing√©nieurs en Informatique et Syst√®mes d'Informations.

        **Merci d'avoir choisi PlagDetect !**
    """)

if __name__ == "__main__":
    create_tables()
